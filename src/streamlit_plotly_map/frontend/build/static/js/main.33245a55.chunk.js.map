{"version":3,"sources":["MyMap.js","StreamlitPlotlyEventsComponent.tsx","index.tsx"],"names":["Plot","createPlotlyComponent","Plotly","ScatterMapbox","props","data","layout","onSelected","selection_color","max_selections","datatemplate","setDatatemplate","useState","selectedPoints","setSelectedPoints","unselectedPoints","setUnselectedPoints","mylayout","setLayout","useEffect","datapoints","lat","map","i","lon","customdata","mydata","point","marker","color","React","createElement","className","style","width","height","event","allPoints","concat","console","log","points","newSelectedPoints","length","slice","alert","newUnselectedPoints","filter","find","selectedPoint","pointIsEqual","point2","point1","error","onInitialized","figure","withStreamlitConnection","_ref","args","plot_obj","JSON","parse","override_height","override_width","click_event","select_event","hover_event","Streamlit","setFrameHeight","plotlyEventHandler","res","stringify","setComponentValue","mapbox","MyMap","revision","undefined","config","frames","onClick","onHover","ReactDOM","render","StrictMode","StreamlitPlotlyEventsComponent","document","getElementById"],"mappings":"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","file":"static/js/main.33245a55.chunk.js","sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport Plotly from 'plotly.js';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nconst Plot = createPlotlyComponent(Plotly);\n\n\nconst pointIsEqual = (point1, point2) => {\n  let coord_equal = point1.lat === point2.lat && point1.lon === point2.lon;\n  // let custom_data_str_1 = JSON.stringify(point1.customdata);\n  // let custom_data_str_2 = JSON.stringify(point2.customdata);\n  // let custom_data_equal = custom_data_str_1 === custom_data_str_2;\n  // return coord_equal && custom_data_equal;\n  return coord_equal\n}\n\nconst ScatterMapbox = (props) => {\n\n  const {data, layout, onSelected, selection_color='red', max_selections} = props;\n\n  let [datatemplate, setDatatemplate] = useState(null);\n  let [selectedPoints, setSelectedPoints] = useState([]);\n  let [unselectedPoints, setUnselectedPoints] = useState([]);\n  let [mylayout, setLayout] = useState(layout);\n\n\n  const onInitialized = (figure) => {\n    console.log('onInitialized')\n    console.log(figure);\n  }\n\n  const onSelectPoints = (event) => {\n    \n    try {\n    // allPoints (join selected and unselected points)\n    const allPoints = selectedPoints.concat(unselectedPoints);\n\n    console.log(event.points)\n\n\n      \n      let newSelectedPoints = event.points.map((point) => {\n        return {\n          lat: point.lat,\n          lon: point.lon,\n          customdata: point.customdata\n        }\n      });\n\n      // if max_selections is defined, only keep the last max_selections points\n      if (max_selections) {\n        if (newSelectedPoints.length > max_selections) {\n          newSelectedPoints = newSelectedPoints.slice(-max_selections);\n          alert('You can only select ' + max_selections + ' points');\n        }\n      }\n      \n      let newUnselectedPoints = allPoints.filter((point) => {\n        return !newSelectedPoints.find((selectedPoint) => pointIsEqual(selectedPoint, point));\n      });\n      \n      setSelectedPoints(newSelectedPoints);\n      setUnselectedPoints(newUnselectedPoints);\n      onSelected(newSelectedPoints);\n    } catch (error) {\n      console.log(error)\n      return;\n    \n    }\n\n\n  }\n\n\n  useEffect(() => {\n    setDatatemplate(data[0]);\n    \n    let datapoints = data[0].lat.map((lat, i) => {\n      return {\n        lat: lat,\n        lon: data[0].lon[i],\n        customdata: data[0].customdata[i]\n      }\n    });\n    \n    setUnselectedPoints(datapoints);\n\n    setLayout(layout);\n  }, []);\n\n\n  let mydata = [\n    {\n      ...datatemplate,\n      lat: unselectedPoints.map((point) => point.lat),\n      lon: unselectedPoints.map((point) => point.lon),\n      customdata: unselectedPoints.map((point) => point.customdata),\n      // marker: {\n        //   color: 'blue',\n        //   size: 10,\n        // }\n      // clear selection\n    },\n    {\n      ...datatemplate,\n      lat: selectedPoints.map((point) => point.lat),\n      lon: selectedPoints.map((point) => point.lon),\n      customdata: selectedPoints.map((point) => point.customdata),\n      marker: {\n        color: selection_color\n        // size: 10,\n      },\n    }\n\n  ]\n\n\n  return (\n    <Plot\n      className=\"plot-container\"\n      // full width\n      style={{ width: '100%', height: '100%' }}\n      data={mydata}\n      layout={mylayout}\n      onSelected={onSelectPoints}\n      // onClick={(event) => console.log(event)} //not working\n      onInitialized={onInitialized}\n      // onRelayout={onRelayout}\n      // onUpdate={(figure) => console.log(figure)}\n    />\n  );\n}\n\nexport default ScatterMapbox;\n\n\n","import { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { useEffect } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { plot } from \"plotly.js\";\nimport MyMap from \"./MyMap\";\n\n\n\nconst StreamlitPlotlyEventsComponent = ({ args }: { args: any }) => {\n  // Pull Plotly object from args and parse\n  const plot_obj = JSON.parse(args[\"plot_obj\"]);\n  const override_height = args[\"override_height\"];\n  const override_width = args[\"override_width\"];\n  const max_selections = args[\"max_selections\"];\n  const selection_color = args[\"selection_color\"];\n\n  // Event booleans\n  const click_event = args[\"click_event\"];\n  const select_event = args[\"select_event\"];\n  const hover_event = args[\"hover_event\"];\n\n  useEffect(() => {\n    Streamlit.setFrameHeight(override_height);\n  }, [override_height]);\n\n  /** Click handler for plot. */\n  const plotlyEventHandler = (data: any) => {\n    \n    let res = JSON.stringify(data)\n    Streamlit.setComponentValue(res);\n  };\n\n  if (plot_obj.layout.mapbox) {\n    return (\n      <MyMap\n        data={plot_obj.data}\n        layout={plot_obj.layout}\n        max_selections={max_selections}\n        revision={1}\n        selection_color={selection_color}\n        onSelected={select_event ? plotlyEventHandler : undefined}\n      />\n    );\n  } else {\n    return (\n      <Plot\n        data={plot_obj.data}\n        layout={plot_obj.layout}\n        config={plot_obj.data}\n        frames={plot_obj.frames}\n        onClick={click_event ? plotlyEventHandler : undefined}\n        onSelected={select_event ? plotlyEventHandler : undefined}\n        onHover={hover_event ? plotlyEventHandler : undefined}\n        style={{ width: override_width, height: override_height }}\n        className=\"stPlotlyChart\"\n      />\n    );\n\n  }\n  \n  \n};\n\nexport default withStreamlitConnection(StreamlitPlotlyEventsComponent);\n\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitPlotlyEventsComponent from \"./StreamlitPlotlyEventsComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitPlotlyEventsComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}