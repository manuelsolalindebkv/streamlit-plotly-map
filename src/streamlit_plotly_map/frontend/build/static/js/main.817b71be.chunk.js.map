{"version":3,"sources":["MyMap.js","StreamlitPlotlyEventsComponent.tsx","index.tsx"],"names":["Plot","createPlotlyComponent","Plotly","ScatterMapbox","props","data","layout","onSelected","selection_color","datatemplate","setDatatemplate","useState","selectedPoints","setSelectedPoints","unselectedPoints","setUnselectedPoints","mylayout","setLayout","useEffect","datapoints","lat","map","i","index","lon","console","log","mydata","point","marker","color","React","createElement","event","points","pointIndex","onInitialized","figure","withStreamlitConnection","_ref","args","plot_obj","JSON","parse","override_height","override_width","click_event","select_event","hover_event","Streamlit","setFrameHeight","plotlyEventHandler","res","stringify","setComponentValue","mapbox","MyMap","revision","undefined","config","frames","onClick","onHover","style","width","height","className","ReactDOM","render","StrictMode","StreamlitPlotlyEventsComponent","document","getElementById"],"mappings":"mPAKA,MAAMA,EAAOC,IAAsBC,KAsGpBC,MApGQC,IAErB,MAAM,KAACC,EAAI,OAAEC,EAAM,WAAEC,EAAU,gBAAEC,EAAgB,OAASJ,EAG1D,IAAKK,EAAcC,GAAmBC,mBAAS,OAC1CC,EAAgBC,GAAqBF,mBAAS,KAC9CG,EAAkBC,GAAuBJ,mBAAS,KAClDK,EAAUC,GAAaN,mBAASL,GAiCrCY,oBAAU,KACRR,EAAgBL,EAAK,IAErB,IAAIc,EAAad,EAAK,GAAGe,IAAIC,IAAI,CAACD,EAAKE,KAC9B,CACLC,MAAOD,EACPF,IAAKA,EACLI,IAAKnB,EAAK,GAAGmB,IAAIF,MAIrBP,EAAoBI,GAEpBF,EAAUX,IACT,IAGHmB,QAAQC,IAAId,GACZa,QAAQC,IAAIZ,GAGZ,IAAIa,EAAS,CACX,IACKlB,EACHW,IAAKN,EAAiBO,IAAKO,GAAUA,EAAMR,KAC3CI,IAAKV,EAAiBO,IAAKO,GAAUA,EAAMJ,MAO7C,IACKf,EACHW,IAAKR,EAAeS,IAAKO,GAAUA,EAAMR,KACzCI,IAAKZ,EAAeS,IAAKO,GAAUA,EAAMJ,KACzCK,OAAQ,CACNC,MAAOtB,KAQb,OACEuB,IAAAC,cAAChC,EAAI,CACHK,KAAMsB,EACNrB,OAAQU,EACRT,WA1EoB0B,IAEtB,IAAIrB,EAAiBqB,EAAMC,OAAOb,IAAKO,IAC9B,CACLL,MAAOK,EAAMO,WACbf,IAAKQ,EAAMR,IACXI,IAAKI,EAAMJ,OAIXV,EAAmBmB,EAAMC,OAAO,GAAG7B,KAAKe,IAAIC,IAAI,CAACD,EAAKE,KACjD,CACLC,MAAOD,EACPF,IAAKA,EACLI,IAAKS,EAAMC,OAAO,GAAG7B,KAAKmB,IAAIF,MAKlCT,EAAkBD,GAClBG,EAAoBD,GACpBP,EAAWK,IAuDTwB,cAjFmBC,IACrBZ,QAAQC,IAAI,iBACZD,QAAQC,IAAIW,OCyCDC,kBArDwBC,IAA8B,IAA7B,KAAEC,GAAqBD,EAE7D,MAAME,EAAWC,KAAKC,MAAMH,EAAe,UACrCI,EAAkBJ,EAAsB,gBACxCK,EAAiBL,EAAqB,eACtChC,EAAkBgC,EAAsB,gBAGxCM,EAAcN,EAAkB,YAChCO,EAAeP,EAAmB,aAClCQ,EAAcR,EAAkB,YAEtCtB,oBAAU,KACR+B,IAAUC,eAAeN,IACxB,CAACA,IAGJ,MAAMO,EAAsB9C,IAE1B,IAAI+C,EAAMV,KAAKW,UAAUhD,GACzB4C,IAAUK,kBAAkBF,IAG9B,OAAIX,EAASnC,OAAOiD,OAEhBxB,IAAAC,cAACwB,EAAK,CACJnD,KAAMoC,EAASpC,KACfC,OAAQmC,EAASnC,OACjBmD,SAAU,EACVjD,gBAAiBA,EACjBD,WAAYwC,EAAeI,OAAqBO,IAKlD3B,IAAAC,cAAChC,IAAI,CACHK,KAAMoC,EAASpC,KACfC,OAAQmC,EAASnC,OACjBqD,OAAQlB,EAASpC,KACjBuD,OAAQnB,EAASmB,OACjBC,QAASf,EAAcK,OAAqBO,EAC5CnD,WAAYwC,EAAeI,OAAqBO,EAChDI,QAASd,EAAcG,OAAqBO,EAC5CK,MAAO,CAAEC,MAAOnB,EAAgBoB,OAAQrB,GACxCsB,UAAU,oBChDlBC,IAASC,OACPrC,IAAAC,cAACD,IAAMsC,WAAU,KACftC,IAAAC,cAACsC,EAA8B,OAEjCC,SAASC,eAAe,U","file":"static/js/main.817b71be.chunk.js","sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport Plotly from 'plotly.js';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport { on } from 'events';\nconst Plot = createPlotlyComponent(Plotly);\n\nconst ScatterMapbox = (props) => {\n\n  const {data, layout, onSelected, selection_color='red'} = props;\n\n\n  let [datatemplate, setDatatemplate] = useState(null);\n  let [selectedPoints, setSelectedPoints] = useState([]);\n  let [unselectedPoints, setUnselectedPoints] = useState([]);\n  let [mylayout, setLayout] = useState(layout);\n\n\n  const onInitialized = (figure) => {\n    console.log('onInitialized')\n    console.log(figure);\n  }\n\n  const onSelectPoints = (event) => {\n\n    let selectedPoints = event.points.map((point) => {\n      return {\n        index: point.pointIndex,\n        lat: point.lat,\n        lon: point.lon\n      }\n    });\n\n    let unselectedPoints = event.points[0].data.lat.map((lat, i) => {\n      return {\n        index: i,\n        lat: lat,\n        lon: event.points[0].data.lon[i],\n      }\n    }\n    );\n\n    setSelectedPoints(selectedPoints);\n    setUnselectedPoints(unselectedPoints);\n    onSelected(selectedPoints);\n  }\n\n\n  useEffect(() => {\n    setDatatemplate(data[0]);\n    \n    let datapoints = data[0].lat.map((lat, i) => {\n      return {\n        index: i,\n        lat: lat,\n        lon: data[0].lon[i],\n      }\n    });\n    \n    setUnselectedPoints(datapoints);\n\n    setLayout(layout);\n  }, []);\n\n\n  console.log(selectedPoints)\n  console.log(unselectedPoints)\n\n\n  let mydata = [\n    {\n      ...datatemplate,\n      lat: unselectedPoints.map((point) => point.lat),\n      lon: unselectedPoints.map((point) => point.lon),\n      // marker: {\n        //   color: 'blue',\n        //   size: 10,\n        // }\n      // clear selection\n    },\n    {\n      ...datatemplate,\n      lat: selectedPoints.map((point) => point.lat),\n      lon: selectedPoints.map((point) => point.lon),\n      marker: {\n        color: selection_color\n        // size: 10,\n      },\n    }\n\n  ]\n\n\n  return (\n    <Plot\n      data={mydata}\n      layout={mylayout}\n      onSelected={onSelectPoints}\n      // onClick={(event) => console.log(event)} //not working\n      onInitialized={onInitialized}\n      // onRelayout={onRelayout}\n      // onUpdate={(figure) => console.log(figure)}\n\n    />\n  );\n}\n\nexport default ScatterMapbox;\n\n\n","import { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { useEffect } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { plot } from \"plotly.js\";\nimport MyMap from \"./MyMap\";\n\n\n\nconst StreamlitPlotlyEventsComponent = ({ args }: { args: any }) => {\n  // Pull Plotly object from args and parse\n  const plot_obj = JSON.parse(args[\"plot_obj\"]);\n  const override_height = args[\"override_height\"];\n  const override_width = args[\"override_width\"];\n  const selection_color = args[\"selection_color\"];\n\n  // Event booleans\n  const click_event = args[\"click_event\"];\n  const select_event = args[\"select_event\"];\n  const hover_event = args[\"hover_event\"];\n\n  useEffect(() => {\n    Streamlit.setFrameHeight(override_height);\n  }, [override_height]);\n\n  /** Click handler for plot. */\n  const plotlyEventHandler = (data: any) => {\n    \n    let res = JSON.stringify(data)\n    Streamlit.setComponentValue(res);\n  };\n\n  if (plot_obj.layout.mapbox) {\n    return (\n      <MyMap\n        data={plot_obj.data}\n        layout={plot_obj.layout}\n        revision={1}\n        selection_color={selection_color}\n        onSelected={select_event ? plotlyEventHandler : undefined}\n      />\n    );\n  } else {\n    return (\n      <Plot\n        data={plot_obj.data}\n        layout={plot_obj.layout}\n        config={plot_obj.data}\n        frames={plot_obj.frames}\n        onClick={click_event ? plotlyEventHandler : undefined}\n        onSelected={select_event ? plotlyEventHandler : undefined}\n        onHover={hover_event ? plotlyEventHandler : undefined}\n        style={{ width: override_width, height: override_height }}\n        className=\"stPlotlyChart\"\n      />\n    );\n\n  }\n  \n  \n};\n\nexport default withStreamlitConnection(StreamlitPlotlyEventsComponent);\n\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitPlotlyEventsComponent from \"./StreamlitPlotlyEventsComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitPlotlyEventsComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}